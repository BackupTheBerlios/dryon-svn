/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif

/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/*************************************************************** -*- c -*-
 * ruby/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Ruby_TypeRegister
#define SWIG_TypeCheck       SWIG_Ruby_TypeCheck
#define SWIG_TypeCast        SWIG_Ruby_TypeCast
#define SWIG_TypeDynamicCast SWIG_Ruby_TypeDynamicCast
#define SWIG_TypeName        SWIG_Ruby_TypeName
#define SWIG_TypePrettyName  SWIG_Ruby_TypePrettyName
#define SWIG_TypeQuery       SWIG_Ruby_TypeQuery
#define SWIG_TypeClientData  SWIG_Ruby_TypeClientData
#define SWIG_PackData        SWIG_Ruby_PackData 
#define SWIG_UnpackData      SWIG_Ruby_UnpackData 

/* Also rename all exported symbols from rubydef.swig */

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/* rubydef.swg */
#ifdef __cplusplus
extern "C" {
#endif

static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;

/* Initialize Ruby runtime support */
SWIGRUNTIME(void)
SWIG_Ruby_InitRuntime(void)
{
    if (_mSWIG == Qnil) {
        _mSWIG = rb_define_module("SWIG");
    }
}

/* Define Ruby class for C type */
SWIGRUNTIME(void)
SWIG_Ruby_define_class(swig_type_info *type)
{
    VALUE klass;
    char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer)) {
	_cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
	rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME(VALUE)
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int own)
{
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;
    
    if (!ptr)
	return Qnil;
    
    if (type->clientdata) {
      sklass = (swig_class *) type->clientdata;
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);
    } else {
      klass_name = (char *) malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *) klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME(VALUE)
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
    VALUE obj;
    swig_class *sklass = (swig_class *) type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Get type mangle from class name */
SWIGRUNTIME(char *)
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Ruby_ConvertPtr(VALUE obj, void **ptr, swig_type_info *ty, int flags)
{
  char *c;
  swig_type_info *tc;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return 0;
  } else {
    Data_Get_Struct(obj, void, *ptr);
  }
  
  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
        if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
          if (*ptr == 0)
            rb_raise(rb_eRuntimeError, "This %s already released", ty->str);
          return 0;
        }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    *ptr = SWIG_TypeCast(tc, *ptr);
  }
  return 0;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Ruby_MustGetPtr(VALUE obj, swig_type_info *ty, int argnum, int flags)
{
  void *result;
  SWIG_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Check convert */
SWIGRUNTIME(int)
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c)
    return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME(VALUE)
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME(void)
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return;

type_error:

  if (flags) {
    if (ty) {
      rb_raise(rb_eTypeError, "Type error. Expected %s", ty->name);
    } else {
      rb_raise(rb_eTypeError, "Expected a pointer");
    }
  }
}

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_RubyScript swig_types[0] 
#define  SWIGTYPE_p_chan_Info swig_types[1] 
#define  SWIGTYPE_p_user_Info swig_types[2] 
#define  SWIGTYPE_p_vectorTuser_Info_p_t swig_types[3] 
static swig_type_info *swig_types[5];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_Embed
#define SWIG_name    "Embed"

static VALUE mEmbed;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#include "ruby_script.h"
#include "network.h"


swig_class cRubyScript;
static void free_RubyScript(RubyScript *);

	string RubyScript_nick_get(RubyScript *);
	int RubyScript_max_nicklen_get(RubyScript*);
	int RubyScript_max_topiclen_get(RubyScript*);
	const vector<string> *RubyScript_getChannelList(RubyScript*);
	bool RubyScript_isChannelName(RubyScript *r, string name);
	void RubyScript_userMode(RubyScript *r, string modestring);
	void RubyScript_changeNick(RubyScript *r, string newnick);
	void RubyScript_join(RubyScript *r, string channel, string key= "");
	void RubyScript_part(RubyScript *r, string channel, string reason= "");
	void RubyScript_privmsg(RubyScript *r, string dest, char *msg);
	user_Info *RubyScript_getUserObj(RubyScript *r, string nick);
	chan_Info *RubyScript_getChanObj(RubyScript *r, string name);
	bool RubyScript_isBotOn(RubyScript *r, string chan);

	bool RubyScript_isMe(RubyScript *r, user_Info *usr);
	void RubyScript_disableScript(RubyScript *r);

	VALUE RubyScript_loadSimpleVar(RubyScript *r, char *name);
	void RubyScript_saveSimpleVar(RubyScript *r, char *name, VALUE val);

	//VALUE RubyScript_loadArrayVar(RubyScript *r, char *name);

	void RubyScript_registerCommand(RubyScript *r, string cmd, string func, char flag, string usage);

	int RubyScript_addUserAccount(RubyScript *r, string user, string hostmask, string flags= "");
	int RubyScript_setAccessFlags(RubyScript *r, string user, string type, string flags);
	void RubyScript_delUserAccount(RubyScript *r, string user);

	string RubyScript_to_s(RubyScript *r);


swig_class cUser;
static void free_user_Info(user_Info *);

string *user_Info_nick_get(user_Info *usr);
string *user_Info_account_name_get(user_Info *usr);
string *user_Info_auth_get(user_Info *usr);
string *user_Info_ident_get(user_Info *usr);
string *user_Info_host_get(user_Info *usr);
string *user_Info_full_host_get(user_Info *usr);

bool user_Info_hasAccount(user_Info *usr);
bool user_Info_hasGlobalFlag(user_Info *usr, unsigned int n);
bool user_Info_hasChannelFlag(user_Info *usr, chan_Info *chan, unsigned int n);
bool user_Info_isAuth(user_Info *usr);
vector<string> *user_Info_getChannelList(user_Info *usr);

void user_Info_privmsg(user_Info *, const char *);
void user_Info_notice(user_Info *, const char *);

string user_Info_to_s(user_Info *);


swig_class cChannel;
static void free_chan_Info(chan_Info *);

	string chan_Info_name_get(chan_Info *chan);

	bool chan_Info_isBotOp(chan_Info *chan);

	bool chan_Info_isOn(chan_Info *chan, string nick);
	bool chan_Info_isOn(chan_Info *chan, user_Info *u);

	bool chan_Info_isOp(chan_Info *chan, string nick);
	bool chan_Info_isOp(chan_Info *chan, user_Info *u);

	bool chan_Info_isVoice(chan_Info *chan, string nick);
	bool chan_Info_isVoice(chan_Info *chan, user_Info *u);

	void chan_Info_topic_set(chan_Info *chan, string topic);
	string chan_Info_topic_get(chan_Info *chan);

	void chan_Info_invite(chan_Info *chan, string nick);
	void chan_Info_invite(chan_Info *chan, user_Info *u);

	void chan_Info_ban(chan_Info *chan, string banmask);
	void chan_Info_ban(chan_Info *chan, user_Info *u);

	void chan_Info_kick(chan_Info *chan, string nick, string reason);
	void chan_Info_kick(chan_Info *chan, user_Info *nick, string reason);

	void chan_Info_unban(chan_Info *chan, string banmask);

	void chan_Info_chanMode(chan_Info *chan, string modestring);

	void chan_Info_setMode(chan_Info *chan, string nick, string mode);
	void chan_Info_setMode(chan_Info *chan, user_Info *u, string mode);

	void chan_Info_ban(chan_Info *chan, user_Info *u);

	void chan_Info_rejoin(chan_Info *chan);
	void chan_Info_part(chan_Info *chan);

	void chan_Info_setChannelKey(chan_Info *chan, string pass);
	vector<user_Info*> chan_Info_getUserlistFromMask(chan_Info *chan, string mask);

	bool chan_Info_isBanned(chan_Info *chan, string host);
	bool chan_Info_isBanned(chan_Info *chan, user_Info *u);

	bool chan_Info_isInBanList(chan_Info *chan, string banmask);

	void chan_Info_privmsg(chan_Info *chan, char *msg);
	void chan_Info_action(chan_Info *chan, char *msg);

	string chan_Info_to_s(chan_Info *chan);

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_RubyScript_allocate(VALUE self) {
#else
    static VALUE
    _wrap_RubyScript_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_RubyScript);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_RubyScript(int argc, VALUE *argv, VALUE self) {
    RubyScript *result;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (RubyScript *)new RubyScript();
    DATA_PTR(self) = result;
    return self;
}


static void
free_RubyScript(RubyScript *arg1) {
    delete arg1;
}
static VALUE
_wrap_RubyScript_bot_nick_get(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    result = RubyScript_nick_get(arg1);
    
    {
        vresult= rb_str_new2((&result)->c_str());
    }
    return vresult;
}


static VALUE
_wrap_RubyScript_max_nicklen_get(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    result = (int)RubyScript_max_nicklen_get(arg1);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_RubyScript_max_topiclen_get(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    result = (int)RubyScript_max_topiclen_get(arg1);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_RubyScript_getChannelList(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    vector<string > *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    result = (vector<string > *)RubyScript_getChannelList(arg1);
    
    {
        VALUE tmp= rb_ary_new2(result->size());
        for( unsigned int ii= 0; ii< result->size(); ii++ )
        {
            VALUE tmp_str= rb_str_new2((*result)[ii].c_str());
            rb_ary_push(tmp, tmp_str);
        }
        
        vresult= tmp;
    }
    return vresult;
}


static VALUE
_wrap_RubyScript_userMode(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    RubyScript_userMode(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_isChannelName(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (bool)RubyScript_isChannelName(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_RubyScript_changeNick(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    RubyScript_changeNick(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_join(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    string arg3 = (string) "" ;
    
    if ((argc < 1) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    if (argc > 1) {
        {
            Check_Type(argv[1], T_STRING);
            arg3= std::string( StringValueCStr(argv[1]) );
        }
    }
    RubyScript_join(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_part(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    string arg3 = (string) "" ;
    
    if ((argc < 1) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    if (argc > 1) {
        {
            Check_Type(argv[1], T_STRING);
            arg3= std::string( StringValueCStr(argv[1]) );
        }
    }
    RubyScript_part(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_privmsg(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    char *arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    arg3 = StringValuePtr(argv[1]);
    RubyScript_privmsg(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_getUserObj(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    user_Info *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (user_Info *)RubyScript_getUserObj(arg1,arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_user_Info,0);
    return vresult;
}


static VALUE
_wrap_RubyScript_getChanObj(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    chan_Info *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (chan_Info *)RubyScript_getChanObj(arg1,arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_chan_Info,0);
    return vresult;
}


static VALUE
_wrap_RubyScript_loadSimpleVar(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    char *arg2 ;
    VALUE result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (VALUE)RubyScript_loadSimpleVar(arg1,arg2);
    
    vresult = result;
    return vresult;
}


static VALUE
_wrap_RubyScript_saveSimpleVar(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    char *arg2 ;
    VALUE arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    arg2 = StringValuePtr(argv[0]);
    arg3 = argv[1];
    RubyScript_saveSimpleVar(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_registerCommand(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    string arg3 ;
    char arg4 ;
    string arg5 = (string) "" ;
    
    if ((argc < 3) || (argc > 4))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    {
        Check_Type(argv[1], T_STRING);
        arg3= std::string( StringValueCStr(argv[1]) );
    }
    arg4 = NUM2CHR(argv[2]);
    if (argc > 3) {
        {
            Check_Type(argv[3], T_STRING);
            arg5= std::string( StringValueCStr(argv[3]) );
        }
    }
    RubyScript_registerCommand(arg1,arg2,arg3,arg4,arg5);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_addUserAccount(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    string arg3 ;
    string arg4 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    {
        Check_Type(argv[1], T_STRING);
        arg3= std::string( StringValueCStr(argv[1]) );
    }
    {
        Check_Type(argv[2], T_STRING);
        arg4= std::string( StringValueCStr(argv[2]) );
    }
    result = (int)RubyScript_addUserAccount(arg1,arg2,arg3,arg4);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_RubyScript_setAccessFlags(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    string arg3 ;
    string arg4 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    {
        Check_Type(argv[1], T_STRING);
        arg3= std::string( StringValueCStr(argv[1]) );
    }
    {
        Check_Type(argv[2], T_STRING);
        arg4= std::string( StringValueCStr(argv[2]) );
    }
    result = (int)RubyScript_setAccessFlags(arg1,arg2,arg3,arg4);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_RubyScript_delUserAccount(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    RubyScript_delUserAccount(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_isBotOn(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (bool)RubyScript_isBotOn(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_RubyScript_isMe(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    result = (bool)RubyScript_isMe(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_RubyScript_disableScript(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    RubyScript_disableScript(arg1);
    
    return Qnil;
}


static VALUE
_wrap_RubyScript_to_s(int argc, VALUE *argv, VALUE self) {
    RubyScript *arg1 = (RubyScript *) 0 ;
    string result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_RubyScript, 1);
    result = RubyScript_to_s(arg1);
    
    {
        vresult= rb_str_new2((&result)->c_str());
    }
    return vresult;
}


static VALUE
_wrap_User_nick_get(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    string *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (string *)user_Info_nick_get(arg1);
    
    {
        vresult= rb_str_new2(result->c_str());
    }
    return vresult;
}


static VALUE
_wrap_User_account_name_get(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    string *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (string *)user_Info_account_name_get(arg1);
    
    {
        vresult= rb_str_new2(result->c_str());
    }
    return vresult;
}


static VALUE
_wrap_User_auth_get(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    string *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (string *)user_Info_auth_get(arg1);
    
    {
        vresult= rb_str_new2(result->c_str());
    }
    return vresult;
}


static VALUE
_wrap_User_ident_get(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    string *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (string *)user_Info_ident_get(arg1);
    
    {
        vresult= rb_str_new2(result->c_str());
    }
    return vresult;
}


static VALUE
_wrap_User_host_get(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    string *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (string *)user_Info_host_get(arg1);
    
    {
        vresult= rb_str_new2(result->c_str());
    }
    return vresult;
}


static VALUE
_wrap_User_full_host_get(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    string *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (string *)user_Info_full_host_get(arg1);
    
    {
        vresult= rb_str_new2(result->c_str());
    }
    return vresult;
}


static VALUE
_wrap_User_isAuth(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (bool)user_Info_isAuth(arg1);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_User_hasAccount(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (bool)user_Info_hasAccount(arg1);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_User_hasGlobalFlag(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    unsigned int arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    arg2 = NUM2UINT(argv[0]);
    result = (bool)user_Info_hasGlobalFlag(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_User_hasChannelFlag(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    chan_Info *arg2 = (chan_Info *) 0 ;
    unsigned int arg3 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_chan_Info, 1);
    arg3 = NUM2UINT(argv[1]);
    result = (bool)user_Info_hasChannelFlag(arg1,arg2,arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_User_getChannelList(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    vector<string > *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = (vector<string > *)user_Info_getChannelList(arg1);
    
    {
        VALUE tmp= rb_ary_new2(result->size());
        for( unsigned int ii= 0; ii< result->size(); ii++ )
        {
            VALUE tmp_str= rb_str_new2((*result)[ii].c_str());
            rb_ary_push(tmp, tmp_str);
        }
        
        vresult= tmp;
    }
    return vresult;
}


static VALUE
_wrap_User_privmsg(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    char *arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    arg2 = StringValuePtr(argv[0]);
    user_Info_privmsg(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_User_notice(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    char *arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    arg2 = StringValuePtr(argv[0]);
    user_Info_notice(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_User_to_s(int argc, VALUE *argv, VALUE self) {
    user_Info *arg1 = (user_Info *) 0 ;
    string result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_user_Info, 1);
    result = user_Info_to_s(arg1);
    
    {
        vresult= rb_str_new2((&result)->c_str());
    }
    return vresult;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_User_allocate(VALUE self) {
#else
    static VALUE
    _wrap_User_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_user_Info);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_User(int argc, VALUE *argv, VALUE self) {
    user_Info *result;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (user_Info *)new user_Info();
    DATA_PTR(self) = result;
    return self;
}


static void
free_user_Info(user_Info *arg1) {
    delete arg1;
}
static VALUE
_wrap_Channel_name_get(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    result = chan_Info_name_get(arg1);
    
    {
        vresult= rb_str_new2((&result)->c_str());
    }
    return vresult;
}


static VALUE
_wrap_Channel_topic_set(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    chan_Info_topic_set(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_topic_get(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    result = chan_Info_topic_get(arg1);
    
    {
        vresult= rb_str_new2((&result)->c_str());
    }
    return vresult;
}


static VALUE
_wrap_Channel_isBotOp(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    result = (bool)chan_Info_isBotOp(arg1);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_Channel_isOn__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (bool)chan_Info_isOn(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_Channel_isOn__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    result = (bool)chan_Info_isOn(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_Channel_isOn(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isOn__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isOn__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_isOn'");
    return Qnil;
}


static VALUE
_wrap_Channel_isOp__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (bool)chan_Info_isOp(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_Channel_isOp__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    result = (bool)chan_Info_isOp(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_Channel_isOp(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isOp__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isOp__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_isOp'");
    return Qnil;
}


static VALUE
_wrap_Channel_isVoice__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (bool)chan_Info_isVoice(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_Channel_isVoice__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    result = (bool)chan_Info_isVoice(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_Channel_isVoice(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isVoice__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isVoice__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_isVoice'");
    return Qnil;
}


static VALUE
_wrap_Channel_invite__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    chan_Info_invite(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_invite__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    chan_Info_invite(arg1,arg2);
    
    return Qnil;
}


static VALUE _wrap_Channel_invite(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_invite__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_invite__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_invite'");
    return Qnil;
}


static VALUE
_wrap_Channel_ban__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    chan_Info_ban(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_ban__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    chan_Info_ban(arg1,arg2);
    
    return Qnil;
}


static VALUE _wrap_Channel_ban(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_ban__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_ban__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_ban'");
    return Qnil;
}


static VALUE
_wrap_Channel_rejoin(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    chan_Info_rejoin(arg1);
    
    return Qnil;
}


static VALUE
_wrap_Channel_part(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    chan_Info_part(arg1);
    
    return Qnil;
}


static VALUE
_wrap_Channel_kick__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    string arg3 = (string) "" ;
    
    if ((argc < 1) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    if (argc > 1) {
        {
            Check_Type(argv[1], T_STRING);
            arg3= std::string( StringValueCStr(argv[1]) );
        }
    }
    chan_Info_kick(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_Channel_kick__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    string arg3 = (string) "" ;
    
    if ((argc < 1) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    if (argc > 1) {
        {
            Check_Type(argv[1], T_STRING);
            arg3= std::string( StringValueCStr(argv[1]) );
        }
    }
    chan_Info_kick(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE _wrap_Channel_kick(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_Channel_kick__SWIG_1(nargs, args, self);
                }
                {
                    _v = (TYPE(argv[2]) == T_STRING) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_Channel_kick__SWIG_1(nargs, args, self);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_Channel_kick__SWIG_0(nargs, args, self);
                }
                {
                    _v = (TYPE(argv[2]) == T_STRING) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_Channel_kick__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_kick'");
    return Qnil;
}


static VALUE
_wrap_Channel_unban(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    chan_Info_unban(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_chanMode(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    chan_Info_chanMode(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_setMode__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    string arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    {
        Check_Type(argv[1], T_STRING);
        arg3= std::string( StringValueCStr(argv[1]) );
    }
    chan_Info_setMode(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE
_wrap_Channel_setMode__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    string arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    {
        Check_Type(argv[1], T_STRING);
        arg3= std::string( StringValueCStr(argv[1]) );
    }
    chan_Info_setMode(arg1,arg2,arg3);
    
    return Qnil;
}


static VALUE _wrap_Channel_setMode(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[4];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (TYPE(argv[2]) == T_STRING) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_Channel_setMode__SWIG_1(nargs, args, self);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (TYPE(argv[2]) == T_STRING) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_Channel_setMode__SWIG_0(nargs, args, self);
                }
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_setMode'");
    return Qnil;
}


static VALUE
_wrap_Channel_setChannelKey(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    chan_Info_setChannelKey(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_getUserlistFromMask(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    SwigValueWrapper< vector<user_Info * > > result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = chan_Info_getUserlistFromMask(arg1,arg2);
    
    {
        vector<user_Info * > * resultptr;
        resultptr = new vector<user_Info * >((vector<user_Info * > &)result);
        vresult = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_vectorTuser_Info_p_t, 1);
    }
    return vresult;
}


static VALUE
_wrap_Channel_isBanned__SWIG_0(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (bool)chan_Info_isBanned(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_Channel_isBanned__SWIG_1(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    user_Info *arg2 = (user_Info *) 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_user_Info, 1);
    result = (bool)chan_Info_isBanned(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE _wrap_Channel_isBanned(int nargs, VALUE *args, VALUE self) {
    int argc;
    VALUE argv[3];
    int ii;
    
    argc = nargs + 1;
    argv[0] = self;
    for (ii = 1; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = args[ii-1];
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                _v = (NIL_P(argv[1]) || (TYPE(argv[1]) == T_DATA && SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_user_Info, 0) != -1)) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isBanned__SWIG_1(nargs, args, self);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            _v = (NIL_P(argv[0]) || (TYPE(argv[0]) == T_DATA && SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_chan_Info, 0) != -1)) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (TYPE(argv[1]) == T_STRING) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Channel_isBanned__SWIG_0(nargs, args, self);
            }
        }
    }
    
    rb_raise(rb_eArgError, "No matching function for overloaded 'Channel_isBanned'");
    return Qnil;
}


static VALUE
_wrap_Channel_privmsg(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    char *arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    arg2 = StringValuePtr(argv[0]);
    chan_Info_privmsg(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_action(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    char *arg2 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    arg2 = StringValuePtr(argv[0]);
    chan_Info_action(arg1,arg2);
    
    return Qnil;
}


static VALUE
_wrap_Channel_isInBanList(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string arg2 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    {
        Check_Type(argv[0], T_STRING);
        arg2= std::string( StringValueCStr(argv[0]) );
    }
    result = (bool)chan_Info_isInBanList(arg1,arg2);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_Channel_to_s(int argc, VALUE *argv, VALUE self) {
    chan_Info *arg1 = (chan_Info *) 0 ;
    string result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_chan_Info, 1);
    result = chan_Info_to_s(arg1);
    
    {
        vresult= rb_str_new2((&result)->c_str());
    }
    return vresult;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_Channel_allocate(VALUE self) {
#else
    static VALUE
    _wrap_Channel_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_chan_Info);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_Channel(int argc, VALUE *argv, VALUE self) {
    chan_Info *result;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (chan_Info *)new chan_Info();
    DATA_PTR(self) = result;
    return self;
}


static void
free_chan_Info(chan_Info *arg1) {
    delete arg1;
}

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_RubyScript[] = {{"_p_RubyScript", 0, "RubyScript *", 0, 0, 0, 0},{"_p_RubyScript", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_chan_Info[] = {{"_p_chan_Info", 0, "chan_Info *", 0, 0, 0, 0},{"_p_chan_Info", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_user_Info[] = {{"_p_user_Info", 0, "user_Info *", 0, 0, 0, 0},{"_p_user_Info", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_vectorTuser_Info_p_t[] = {{"_p_vectorTuser_Info_p_t", 0, "vector<user_Info * > *", 0, 0, 0, 0},{"_p_vectorTuser_Info_p_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_RubyScript, 
_swigt__p_chan_Info, 
_swigt__p_user_Info, 
_swigt__p_vectorTuser_Info_p_t, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) Init_Embed(void) {
    int i;
    
    SWIG_InitRuntime();
    mEmbed = rb_define_module("Embed");
    
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        SWIG_define_class(swig_types[i]);
    }
    
    
    cRubyScript.klass = rb_define_class_under(mEmbed, "RubyScript", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_RubyScript, (void *) &cRubyScript);
    rb_define_alloc_func(cRubyScript.klass, _wrap_RubyScript_allocate);
    rb_define_method(cRubyScript.klass, "initialize", VALUEFUNC(_wrap_new_RubyScript), -1);
    rb_define_method(cRubyScript.klass, "bot_nick", VALUEFUNC(_wrap_RubyScript_bot_nick_get), -1);
    rb_define_method(cRubyScript.klass, "max_nicklen", VALUEFUNC(_wrap_RubyScript_max_nicklen_get), -1);
    rb_define_method(cRubyScript.klass, "max_topiclen", VALUEFUNC(_wrap_RubyScript_max_topiclen_get), -1);
    rb_define_method(cRubyScript.klass, "getChannelList", VALUEFUNC(_wrap_RubyScript_getChannelList), -1);
    rb_define_method(cRubyScript.klass, "userMode", VALUEFUNC(_wrap_RubyScript_userMode), -1);
    rb_define_method(cRubyScript.klass, "isChannelName", VALUEFUNC(_wrap_RubyScript_isChannelName), -1);
    rb_define_method(cRubyScript.klass, "changeNick", VALUEFUNC(_wrap_RubyScript_changeNick), -1);
    rb_define_method(cRubyScript.klass, "join", VALUEFUNC(_wrap_RubyScript_join), -1);
    rb_define_method(cRubyScript.klass, "part", VALUEFUNC(_wrap_RubyScript_part), -1);
    rb_define_method(cRubyScript.klass, "privmsg", VALUEFUNC(_wrap_RubyScript_privmsg), -1);
    rb_define_method(cRubyScript.klass, "getUserObj", VALUEFUNC(_wrap_RubyScript_getUserObj), -1);
    rb_define_method(cRubyScript.klass, "getChanObj", VALUEFUNC(_wrap_RubyScript_getChanObj), -1);
    rb_define_method(cRubyScript.klass, "loadSimpleVar", VALUEFUNC(_wrap_RubyScript_loadSimpleVar), -1);
    rb_define_method(cRubyScript.klass, "saveSimpleVar", VALUEFUNC(_wrap_RubyScript_saveSimpleVar), -1);
    rb_define_method(cRubyScript.klass, "registerCommand", VALUEFUNC(_wrap_RubyScript_registerCommand), -1);
    rb_define_method(cRubyScript.klass, "addUserAccount", VALUEFUNC(_wrap_RubyScript_addUserAccount), -1);
    rb_define_method(cRubyScript.klass, "setAccessFlags", VALUEFUNC(_wrap_RubyScript_setAccessFlags), -1);
    rb_define_method(cRubyScript.klass, "delUserAccount", VALUEFUNC(_wrap_RubyScript_delUserAccount), -1);
    rb_define_method(cRubyScript.klass, "isBotOn", VALUEFUNC(_wrap_RubyScript_isBotOn), -1);
    rb_define_method(cRubyScript.klass, "isMe", VALUEFUNC(_wrap_RubyScript_isMe), -1);
    rb_define_method(cRubyScript.klass, "disableScript", VALUEFUNC(_wrap_RubyScript_disableScript), -1);
    rb_define_method(cRubyScript.klass, "to_s", VALUEFUNC(_wrap_RubyScript_to_s), -1);
    cRubyScript.mark = 0;
    cRubyScript.destroy = (void (*)(void *)) free_RubyScript;
    rb_define_const(mEmbed,"USRLVL_OWNER", INT2NUM((1<<0)));
    rb_define_const(mEmbed,"USRLVL_MASTER", INT2NUM((1<<1)));
    rb_define_const(mEmbed,"USRLVL_OPERATOR", INT2NUM((1<<2)));
    rb_define_const(mEmbed,"USRLVL_VOICE", INT2NUM((1<<3)));
    rb_define_const(mEmbed,"USRLVL_KICK", INT2NUM((1<<4)));
    rb_define_const(mEmbed,"USRLVL_PUBLIC", INT2NUM((1<<9)));
    
    cUser.klass = rb_define_class_under(mEmbed, "User", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_user_Info, (void *) &cUser);
    rb_define_alloc_func(cUser.klass, _wrap_User_allocate);
    rb_define_method(cUser.klass, "initialize", VALUEFUNC(_wrap_new_User), -1);
    rb_define_method(cUser.klass, "nick", VALUEFUNC(_wrap_User_nick_get), -1);
    rb_define_method(cUser.klass, "account_name", VALUEFUNC(_wrap_User_account_name_get), -1);
    rb_define_method(cUser.klass, "auth", VALUEFUNC(_wrap_User_auth_get), -1);
    rb_define_method(cUser.klass, "ident", VALUEFUNC(_wrap_User_ident_get), -1);
    rb_define_method(cUser.klass, "host", VALUEFUNC(_wrap_User_host_get), -1);
    rb_define_method(cUser.klass, "full_host", VALUEFUNC(_wrap_User_full_host_get), -1);
    rb_define_method(cUser.klass, "isAuth", VALUEFUNC(_wrap_User_isAuth), -1);
    rb_define_method(cUser.klass, "hasAccount", VALUEFUNC(_wrap_User_hasAccount), -1);
    rb_define_method(cUser.klass, "hasGlobalFlag", VALUEFUNC(_wrap_User_hasGlobalFlag), -1);
    rb_define_method(cUser.klass, "hasChannelFlag", VALUEFUNC(_wrap_User_hasChannelFlag), -1);
    rb_define_method(cUser.klass, "getChannelList", VALUEFUNC(_wrap_User_getChannelList), -1);
    rb_define_method(cUser.klass, "privmsg", VALUEFUNC(_wrap_User_privmsg), -1);
    rb_define_method(cUser.klass, "notice", VALUEFUNC(_wrap_User_notice), -1);
    rb_define_method(cUser.klass, "to_s", VALUEFUNC(_wrap_User_to_s), -1);
    cUser.mark = 0;
    cUser.destroy = (void (*)(void *)) free_user_Info;
    
    cChannel.klass = rb_define_class_under(mEmbed, "Channel", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_chan_Info, (void *) &cChannel);
    rb_define_alloc_func(cChannel.klass, _wrap_Channel_allocate);
    rb_define_method(cChannel.klass, "initialize", VALUEFUNC(_wrap_new_Channel), -1);
    rb_define_method(cChannel.klass, "name", VALUEFUNC(_wrap_Channel_name_get), -1);
    rb_define_method(cChannel.klass, "topic=", VALUEFUNC(_wrap_Channel_topic_set), -1);
    rb_define_method(cChannel.klass, "topic", VALUEFUNC(_wrap_Channel_topic_get), -1);
    rb_define_method(cChannel.klass, "isBotOp", VALUEFUNC(_wrap_Channel_isBotOp), -1);
    rb_define_method(cChannel.klass, "isOn", VALUEFUNC(_wrap_Channel_isOn), -1);
    rb_define_method(cChannel.klass, "isOp", VALUEFUNC(_wrap_Channel_isOp), -1);
    rb_define_method(cChannel.klass, "isVoice", VALUEFUNC(_wrap_Channel_isVoice), -1);
    rb_define_method(cChannel.klass, "invite", VALUEFUNC(_wrap_Channel_invite), -1);
    rb_define_method(cChannel.klass, "ban", VALUEFUNC(_wrap_Channel_ban), -1);
    rb_define_method(cChannel.klass, "rejoin", VALUEFUNC(_wrap_Channel_rejoin), -1);
    rb_define_method(cChannel.klass, "part", VALUEFUNC(_wrap_Channel_part), -1);
    rb_define_method(cChannel.klass, "kick", VALUEFUNC(_wrap_Channel_kick), -1);
    rb_define_method(cChannel.klass, "unban", VALUEFUNC(_wrap_Channel_unban), -1);
    rb_define_method(cChannel.klass, "chanMode", VALUEFUNC(_wrap_Channel_chanMode), -1);
    rb_define_method(cChannel.klass, "setMode", VALUEFUNC(_wrap_Channel_setMode), -1);
    rb_define_method(cChannel.klass, "setChannelKey", VALUEFUNC(_wrap_Channel_setChannelKey), -1);
    rb_define_method(cChannel.klass, "getUserlistFromMask", VALUEFUNC(_wrap_Channel_getUserlistFromMask), -1);
    rb_define_method(cChannel.klass, "isBanned", VALUEFUNC(_wrap_Channel_isBanned), -1);
    rb_define_method(cChannel.klass, "privmsg", VALUEFUNC(_wrap_Channel_privmsg), -1);
    rb_define_method(cChannel.klass, "action", VALUEFUNC(_wrap_Channel_action), -1);
    rb_define_method(cChannel.klass, "isInBanList", VALUEFUNC(_wrap_Channel_isInBanList), -1);
    rb_define_method(cChannel.klass, "to_s", VALUEFUNC(_wrap_Channel_to_s), -1);
    cChannel.mark = 0;
    cChannel.destroy = (void (*)(void *)) free_chan_Info;
}

